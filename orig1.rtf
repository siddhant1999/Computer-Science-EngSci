{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;\red63\green110\blue116;
\red38\green71\blue75;}
\margl1440\margr1440\vieww10920\viewh10200\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  OpenCV Testing\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Siddhant Jain on 2016-07-07.\cf0 \
\cf2 //  Copyright \'a9 2016 Siddhant Jain. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <iostream>\cf3 \
#include \cf4 <opencv2/highgui/highgui.hpp>\cf3 \
#include \cf4 <opencv2/stitching/stitcher.hpp>\cf3 \
#include \cf4 <opencv2/nonfree/nonfree.hpp>\cf3 \
#include \cf4 <opencv2/superres/superres.hpp>\cf3 \
#include \cf4 <opencv2/videostab/videostab.hpp>\cf3 \
#include \cf4 <opencv2/gpu/gpu.hpp>\cf3 \
#include \cf4 <opencv2/legacy/legacy.hpp>\cf3 \
#include \cf4 <opencv2/ocl/ocl.hpp>\cf3 \
#include \cf4 <opencv2/calib3d/calib3d.hpp>\cf3 \
#include \cf4 <opencv2/features2d/features2d.hpp>\cf3 \
#include \cf4 <opencv2/objdetect/objdetect.hpp>\cf3 \
#include \cf4 <opencv2/video/video.hpp>\cf3 \
#include \cf4 <opencv2/photo/photo.hpp>\cf3 \
#include \cf4 <opencv2/imgproc/imgproc.hpp>\cf3 \
#include \cf4 <opencv2/flann/flann.hpp>\cf3 \
#include \cf4 <opencv2/ml/ml.hpp>\cf3 \
#include \cf4 <opencv2/core/core.hpp>\cf3 \
#include \cf4 <opencv2/contrib/contrib.hpp>\cf3 \
\cf0 \
\cf3 #include \cf4 <algorithm>\cf3 \
#include \cf4 <stdlib.h>\cf3 \
#include \cf4 <vector>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <queue>\cf3 \
#include \cf4 <math.h>\cf3 \
#include \cf4 <fstream>\cf3 \
#include \cf4 <set>\cf3 \
#include \cf4 <map>\cf3 \
#include \cf4 <bitset>\cf3 \
#include \cf4 <iomanip>\cf3 \
#include \cf4 <ctime>\cf3 \
#include\cf4 <sstream>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  \cf6 cv\cf0 ;\
\
\cf6 Mat\cf0  originalImg, editedImg, currentImg, circledImg;\
\cf5 int\cf0  xPointOne(-\cf7 1\cf0 ), xPointTwo(-\cf7 1\cf0 ), yPointOne(-\cf7 1\cf0 ), yPointTwo(-\cf7 1\cf0 );\
\cf5 int\cf0  blurDegree(\cf7 1\cf0 );\
\cf5 int\cf0  sumRGB[\cf7 3\cf0 ];\
\cf5 int\cf0  avgRGB[\cf7 3\cf0 ];\
\cf5 const\cf0  \cf6 vector\cf0 <\cf5 int\cf0 > COMPRESS_PARAMS = \{ \cf8 CV_IMWRITE_JPEG_QUALITY\cf0 , \cf7 100\cf0  \} ;\
\cf5 const\cf0  \cf6 string\cf0  LOAD_PATH = \cf4 "/Users/siddhantjain/Documents/Loaded/img.jpg"\cf0 ;\
\cf5 const\cf0  \cf6 string\cf0  SAVE_PATH = \cf4 "/Users/siddhantjain/Documents/Saved/blurred.jpg"\cf0 ;\
\
\cf6 string\cf0  SATH = \cf4 "/Users/siddhantjain/Documents/Saved/"\cf0 ;\
\
\cf5 void\cf0  blur();\
\cf5 void\cf0  checkPoints();\
\cf5 void\cf0  blurRegion(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y);\
\cf5 void\cf0  findAverage(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y);\
\cf5 void\cf0  onMouse(\cf5 int\cf0  event, \cf5 int\cf0  x, \cf5 int\cf0  y, \cf5 int\cf0  flags, \cf5 void\cf0  * userdata);\
\
\cf5 int\cf0  main()\{\
    \cf2 /*if((originalImg = imread(LOAD_PATH)).data == NULL)\{\
        //meaning the image does not exist\
        printf("Error - File not found: %s\\n", LOAD_PATH.c_str());\
        system("pause");\
        return 2;\
    \}*/\cf0 \
    \cf9 originalImg\cf0  = \cf8 imread\cf0 (\cf9 LOAD_PATH\cf0 );\
    \
    \cf2 //resize(originalImg, originalImg, Size(600, 800));\cf0 \
    \
    \cf5 for\cf0  (; \cf9 blurDegree\cf0 <=\cf7 15\cf0 ; \cf9 blurDegree\cf0 ++) \{\
        \cf9 originalImg\cf0 .\cf8 copyTo\cf0 (\cf9 editedImg\cf0 );\
    \
        \cf9 currentImg\cf0  = \cf9 editedImg\cf0 ;\
        \cf9 xPointOne\cf0  = \cf7 0\cf0 ;\
        \cf9 yPointOne\cf0  = \cf7 0\cf0 ;\
        \cf9 yPointTwo\cf0  = \cf9 editedImg\cf0 .\cf6 rows\cf0 ;\
        \cf9 xPointTwo\cf0  = \cf9 editedImg\cf0 .\cf6 cols\cf0 ;\
        \cf10 blur\cf0 ();\
    \}\
    \cf2 //namedWindow("Blurring Tool", WINDOW_AUTOSIZE);\cf0 \
    \cf2 //setMouseCallback("Blurring Tool", onMouse);\cf0 \
    \
    \cf2 /*while(true)\{\
        imshow("Blurring Tool", currentImg);\
        char c = waitKey(1);\
        \
        switch (c) \{\
            case 27:\
                return 0;\
            case 'r':\
            case 'R':\
                originalImg.copyTo(editedImg);\
                currentImg = editedImg;\
                xPointOne = xPointTwo = yPointOne = yPointTwo = -1;\
                break;\
            case 'i':\
            case 'I':\
                if(blurDegree < 5)\
                    blurDegree++;\
                else\
                    blurDegree +=5;\
                printf("Blur degree increased to: %d\\n", blurDegree);\
                break;\
            case 'd':\
            case 'D':\
                if (blurDegree<=5 && blurDegree>1)\
                    blurDegree--;\
                else\
                    blurDegree -= 5;\
                printf("Blur degree decreased to: %d\\n", blurDegree);\
                break;\
            case 's':\
            case 'S':\
                imwrite(SAVE_PATH, currentImg, COMPRESS_PARAMS);\
                printf("Image saved t o%s\\n", SAVE_PATH.c_str());\
                break;\
            default:\
                continue;\
        \}\
    \}*/\cf0 \
    \cf5 return\cf0  \cf7 1\cf0 ;\
\}\
\
\cf2 /*void onMouse(int event, int x, int y, int flags, void * userdata)\{\
    if(event == EVENT_LBUTTONDOWN)\{//leftclick\
        if (xPointOne == -1) \{\
            editedImg.copyTo(circledImg);\
            circle(circledImg, Point(x,y), 2, Scalar(0,0,255), -1);//red circle (-1)-> filled circle\
            currentImg=circledImg;\
            xPointOne = x;\
            yPointOne = y;\
        \}\
        else \{\
            currentImg = editedImg; //(red disappears)\
            xPointTwo = x;\
            yPointTwo = y;\
            checkPoints();\
            blur();\
            xPointOne=xPointTwo=yPointOne=yPointTwo=-1;\
        \}\
    \}\
\}*/\cf0 \
\
\cf2 /*void checkPoints()\{\
    if(xPointOne > xPointTwo)\{\
        std:: swap(xPointTwo, xPointOne);\
    \}\
    if(yPointOne > yPointTwo)\{\
        std:: swap(yPointTwo, yPointOne);\
    \}\
\}*/\cf0 \
\
\cf5 void\cf0  blur()\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf9 yPointOne\cf0 ; i < \cf9 yPointTwo\cf0 ; i+=\cf9 blurDegree\cf0 ) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = \cf9 xPointOne\cf0 ; j < \cf9 xPointTwo\cf0 ; j+=\cf9 blurDegree\cf0 ) \{\
            \cf10 findAverage\cf0 (j,i);\
            \cf10 blurRegion\cf0 (j,i);\
            \
            \cf5 for\cf0  (\cf5 int\cf0  k = \cf7 0\cf0 ; k <\cf7 3\cf0 ; k++) \{\
                \cf9 avgRGB\cf0 [k]=\cf9 sumRGB\cf0 [k] = \cf7 0\cf0 ;\
            \}\
        \}\
    \}\
    \
    \cf6 std\cf0 :: \cf6 stringstream\cf0  ss;\
    \
    \cf6 string\cf0  name = \cf4 "blurred_"\cf0 ;\
    \cf6 string\cf0  type = \cf4 ".jpg"\cf0 ;\
    \
    ss<< \cf9 SATH\cf0  << name<<(\cf9 blurDegree\cf0 )<<type;\
    \
    \cf6 string\cf0  filename = ss.\cf8 str\cf0 ();\
    ss.\cf8 str\cf0 (\cf4 ""\cf0 );\
    \
    \cf2 //alter SATH\cf0 \
    \cf8 imwrite\cf0 (filename, \cf9 currentImg\cf0 , \cf9 COMPRESS_PARAMS\cf0 );\
    \cf8 printf\cf0 (\cf4 "%d Image saved to %s\\n"\cf0 ,\cf9 blurDegree\cf0 , filename.\cf8 c_str\cf0 ());\
\}\
\
\cf5 void\cf0  findAverage(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y)\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf7 0\cf0 ; i < \cf9 blurDegree\cf0 ; i++) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = \cf7 0\cf0 ; j < \cf9 blurDegree\cf0 ; j++) \{\
            \cf5 if\cf0 ((y+i) < \cf9 editedImg\cf0 .\cf6 rows\cf0  && (x+j) < \cf9 editedImg\cf0 .\cf6 cols\cf0 )\{\
                \cf9 sumRGB\cf0 [\cf7 0\cf0 ] += (\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)])*(\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)]);\
                \cf9 sumRGB\cf0 [\cf7 1\cf0 ] += (\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 1\cf0 ])*(\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 1\cf0 ]);\
                \cf9 sumRGB\cf0 [\cf7 2\cf0 ] += (\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 2\cf0 ])*(\cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 2\cf0 ]);\
            \}\
        \}\
    \}\
    \
    \cf5 for\cf0  (\cf5 int\cf0  k = \cf7 0\cf0 ; k < \cf7 3\cf0 ; k++) \{\
        \cf9 avgRGB\cf0 [k] = \cf8 sqrt\cf0 (\cf9 sumRGB\cf0 [k] / (\cf9 blurDegree\cf0  * \cf9 blurDegree\cf0 ));\
    \}\
\}\
\
\cf5 void\cf0  blurRegion(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y)\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf7 0\cf0 ; i < \cf9 blurDegree\cf0 ; i++) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = \cf7 0\cf0 ; j < \cf9 blurDegree\cf0 ; j++) \{\
            \cf5 if\cf0 ((y+i) < \cf9 editedImg\cf0 .\cf6 rows\cf0  && (x+j) < \cf9 editedImg\cf0 .\cf6 cols\cf0 )\{\
                \cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)]=\cf9 avgRGB\cf0 [\cf7 0\cf0 ];\
                \cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 1\cf0 ]=\cf9 avgRGB\cf0 [\cf7 1\cf0 ];\
                \cf9 editedImg\cf0 .\cf8 ptr\cf0 <\cf6 uchar\cf0 >(y+i)[\cf7 3\cf0 *(x+j)+\cf7 2\cf0 ]=\cf9 avgRGB\cf0 [\cf7 2\cf0 ];\
            \}\
        \}\
    \}\
    \
\}\
\
\
\cf2 /*int main() \{\
 //This is all for setting up a webcam (part of the tutorial, ignore for now)\
 std::cout << "Hello, World!\\n";\
 VideoCapture cap(0);\
 \
 while (true) \{\
 Mat webcam;\
 cap.read(webcam);\
 imshow("WEBCAM", webcam);\
 \}\
 return 0;\
 \}*/\cf0 \
}