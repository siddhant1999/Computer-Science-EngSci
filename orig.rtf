{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red28\green0\blue207;\red63\green110\blue116;\red46\green13\blue110;\red92\green38\blue153;
\red38\green71\blue75;}
\margl1440\margr1440\vieww10920\viewh10200\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  main.cpp\cf0 \
\cf2 //  OpenCV Testing\cf0 \
\cf2 //\cf0 \
\cf2 //  Created by Siddhant Jain on 2016-07-07.\cf0 \
\cf2 //  Copyright \'a9 2016 Siddhant Jain. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\cf3 #include \cf4 <iostream>\cf3 \
#include \cf4 <opencv2/highgui/highgui.hpp>\cf3 \
#include \cf4 <opencv2/stitching/stitcher.hpp>\cf3 \
#include \cf4 <opencv2/nonfree/nonfree.hpp>\cf3 \
#include \cf4 <opencv2/superres/superres.hpp>\cf3 \
#include \cf4 <opencv2/videostab/videostab.hpp>\cf3 \
#include \cf4 <opencv2/gpu/gpu.hpp>\cf3 \
#include \cf4 <opencv2/legacy/legacy.hpp>\cf3 \
#include \cf4 <opencv2/ocl/ocl.hpp>\cf3 \
#include \cf4 <opencv2/calib3d/calib3d.hpp>\cf3 \
#include \cf4 <opencv2/features2d/features2d.hpp>\cf3 \
#include \cf4 <opencv2/objdetect/objdetect.hpp>\cf3 \
#include \cf4 <opencv2/video/video.hpp>\cf3 \
#include \cf4 <opencv2/photo/photo.hpp>\cf3 \
#include \cf4 <opencv2/imgproc/imgproc.hpp>\cf3 \
#include \cf4 <opencv2/flann/flann.hpp>\cf3 \
#include \cf4 <opencv2/ml/ml.hpp>\cf3 \
#include \cf4 <opencv2/core/core.hpp>\cf3 \
#include \cf4 <opencv2/contrib/contrib.hpp>\cf3 \
\cf0 \
\cf3 #include \cf4 <algorithm>\cf3 \
#include \cf4 <stdlib.h>\cf3 \
#include \cf4 <vector>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <queue>\cf3 \
#include \cf4 <math.h>\cf3 \
#include \cf4 <fstream>\cf3 \
#include \cf4 <set>\cf3 \
#include \cf4 <map>\cf3 \
#include \cf4 <bitset>\cf3 \
#include \cf4 <iomanip>\cf3 \
#include \cf4 <ctime>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  cv;\
\
Mat originalImg, editedImg, currentImg, circledImg;\
\cf5 int\cf0  xPointOne(-\cf6 1\cf0 ), xPointTwo(-\cf6 1\cf0 ), yPointOne(-\cf6 1\cf0 ), yPointTwo(-\cf6 1\cf0 );\
\cf5 int\cf0  blurDegree(\cf6 5\cf0 );\
\cf5 int\cf0  sumRGB[\cf6 3\cf0 ];\
\cf5 int\cf0  avgRGB[\cf6 3\cf0 ];\
\cf5 const\cf0  vector<\cf5 int\cf0 > COMPRESS_PARAMS = \{ CV_IMWRITE_JPEG_QUALITY, \cf6 100\cf0  \} ;\
\cf5 const\cf0  string LOAD_PATH = \cf4 "/Users/siddhantjain/Documents/Loaded/img.jpg"\cf0 ;\
\cf5 const\cf0  string SAVE_PATH = \cf4 "/Users/siddhantjain/Documents/Saved/blurred.jpg"\cf0 ;\
\
\cf5 void\cf0  blur();\
\cf5 void\cf0  checkPoints();\
\cf5 void\cf0  blurRegion(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y);\
\cf5 void\cf0  findAverage(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y);\
\cf5 void\cf0  onMouse(\cf5 int\cf0  event, \cf5 int\cf0  x, \cf5 int\cf0  y, \cf5 int\cf0  flags, \cf5 void\cf0  * userdata);\
\
\cf5 int\cf0  main()\{\
    \cf5 if\cf0 ((\cf7 originalImg\cf0  = \cf8 imread\cf0 (\cf7 LOAD_PATH\cf0 )).\cf9 data\cf0  == \cf5 NULL\cf0 )\{\
        \cf2 //meaning the image does not exist\cf0 \
        \cf8 printf\cf0 (\cf4 "Error - File not found: %s\\n"\cf0 , \cf7 LOAD_PATH\cf0 .\cf8 c_str\cf0 ());\
        \cf8 system\cf0 (\cf4 "pause"\cf0 );\
        \cf5 return\cf0  \cf6 2\cf0 ;\
    \}\
    \
    \cf2 //resize(originalImg, originalImg, Size(600, 800));\cf0 \
    \cf7 originalImg\cf0 .\cf8 copyTo\cf0 (\cf7 editedImg\cf0 );\
    \
    \cf7 currentImg\cf0  = \cf7 editedImg\cf0 ;\
    \
    \cf8 namedWindow\cf0 (\cf4 "Blurring Tool"\cf0 , \cf8 WINDOW_AUTOSIZE\cf0 );\
    \cf8 setMouseCallback\cf0 (\cf4 "Blurring Tool"\cf0 , \cf10 onMouse\cf0 );\
    \
    \cf5 while\cf0 (\cf5 true\cf0 )\{\
        \cf8 imshow\cf0 (\cf4 "Blurring Tool"\cf0 , \cf7 currentImg\cf0 );\
        \cf5 char\cf0  c = \cf8 waitKey\cf0 (\cf6 1\cf0 );\
        \
        \cf5 switch\cf0  (c) \{\
            \cf5 case\cf0  \cf6 27\cf0 :\
                \cf5 return\cf0  \cf6 0\cf0 ;\
            \cf5 case\cf0  \cf6 'r'\cf0 :\
            \cf5 case\cf0  \cf6 'R'\cf0 :\
                \cf7 originalImg\cf0 .\cf8 copyTo\cf0 (\cf7 editedImg\cf0 );\
                \cf7 currentImg\cf0  = \cf7 editedImg\cf0 ;\
                \cf7 xPointOne\cf0  = \cf7 xPointTwo\cf0  = \cf7 yPointOne\cf0  = \cf7 yPointTwo\cf0  = -\cf6 1\cf0 ;\
                \cf5 break\cf0 ;\
            \cf5 case\cf0  \cf6 'i'\cf0 :\
            \cf5 case\cf0  \cf6 'I'\cf0 :\
                \cf5 if\cf0 (\cf7 blurDegree\cf0  < \cf6 5\cf0 )\
                    \cf7 blurDegree\cf0 ++;\
                \cf5 else\cf0 \
                    \cf7 blurDegree\cf0  +=\cf6 5\cf0 ;\
                \cf8 printf\cf0 (\cf4 "Blur degree increased to: %d\\n"\cf0 , \cf7 blurDegree\cf0 );\
                \cf5 break\cf0 ;\
            \cf5 case\cf0  \cf6 'd'\cf0 :\
            \cf5 case\cf0  \cf6 'D'\cf0 :\
                \cf5 if\cf0  (\cf7 blurDegree\cf0 <=\cf6 5\cf0  && \cf7 blurDegree\cf0 >\cf6 1\cf0 )\
                    \cf7 blurDegree\cf0 --;\
                \cf5 else\cf0 \
                    \cf7 blurDegree\cf0  -= \cf6 5\cf0 ;\
                \cf8 printf\cf0 (\cf4 "Blur degree decreased to: %d\\n"\cf0 , \cf7 blurDegree\cf0 );\
                \cf5 break\cf0 ;\
            \cf5 case\cf0  \cf6 's'\cf0 :\
            \cf5 case\cf0  \cf6 'S'\cf0 :\
                imwrite(SAVE_PATH, currentImg, COMPRESS_PARAMS);\
                printf(\cf4 "Image saved t o%s\\n"\cf0 , SAVE_PATH.c_str());\
                \cf5 break\cf0 ;\
            \cf5 default\cf0 :\
                \cf5 continue\cf0 ;\
        \}\
    \}\
    \cf5 return\cf0  \cf6 1\cf0 ;\
\}\
\
\cf5 void\cf0  onMouse(\cf5 int\cf0  event, \cf5 int\cf0  x, \cf5 int\cf0  y, \cf5 int\cf0  flags, \cf5 void\cf0  * userdata)\{\
    \cf5 if\cf0 (event == EVENT_LBUTTONDOWN)\{\cf2 //leftclick\cf0 \
        \cf5 if\cf0  (xPointOne == -\cf6 1\cf0 ) \{\
            editedImg.copyTo(circledImg);\
            circle(circledImg, Point(x,y), \cf6 2\cf0 , Scalar(\cf6 0\cf0 ,\cf6 0\cf0 ,\cf6 255\cf0 ), -\cf6 1\cf0 );\cf2 //red circle (-1)-> filled circle\cf0 \
            currentImg=circledImg;\
            xPointOne = x;\
            yPointOne = y;\
        \}\
        \cf5 else\cf0  \{\
            currentImg = editedImg; \cf2 //(red disappears)\cf0 \
            xPointTwo = x;\
            yPointTwo = y;\
            checkPoints();\
            blur();\
            xPointOne=xPointTwo=yPointOne=yPointTwo=-\cf6 1\cf0 ;\
        \}\
    \}\
\}\
\
\cf5 void\cf0  checkPoints()\{\
    \cf5 if\cf0 (xPointOne > xPointTwo)\{\
        std:: swap(xPointTwo, xPointOne);\
    \}\
    \cf5 if\cf0 (yPointOne > yPointTwo)\{\
        std:: swap(yPointTwo, yPointOne);\
    \}\
\}\
\
\cf5 void\cf0  blur()\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = yPointOne; i < yPointTwo; i+=blurDegree) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = xPointOne; j < xPointTwo; j+=blurDegree) \{\
            findAverage(j,i);\
            blurRegion(j,i);\
            \
            \cf5 for\cf0  (\cf5 int\cf0  k = \cf6 0\cf0 ; k <\cf6 3\cf0 ; k++) \{\
                avgRGB[k]=sumRGB[k] = \cf6 0\cf0 ;\
            \}\
        \}\
    \}\
\}\
\
\cf5 void\cf0  findAverage(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y)\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf6 0\cf0 ; i < blurDegree; i++) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = \cf6 0\cf0 ; j < blurDegree; j++) \{\
            \cf5 if\cf0 ((y+i) < editedImg.rows && (x+j) < editedImg.cols)\{\
                sumRGB[\cf6 0\cf0 ] += editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)];\
                sumRGB[\cf6 1\cf0 ] += editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)+\cf6 1\cf0 ];\
                sumRGB[\cf6 2\cf0 ] += editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)+\cf6 2\cf0 ];\
            \}\
        \}\
    \}\
    \
    \cf5 for\cf0  (\cf5 int\cf0  k = \cf6 0\cf0 ; k < \cf6 3\cf0 ; k++) \{\
        avgRGB[k] = sumRGB[k] / (blurDegree * blurDegree);\
    \}\
\}\
\
\cf5 void\cf0  blurRegion(\cf5 const\cf0  \cf5 int\cf0  x, \cf5 const\cf0  \cf5 int\cf0  y)\{\
    \cf5 for\cf0  (\cf5 int\cf0  i = \cf6 0\cf0 ; i < blurDegree; i++) \{\
        \cf5 for\cf0  (\cf5 int\cf0  j = \cf6 0\cf0 ; j < blurDegree; j++) \{\
            \cf5 if\cf0 ((y+i) < editedImg.rows && (x+j) < editedImg.cols)\{\
                editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)]=avgRGB[\cf6 0\cf0 ];\
                editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)+\cf6 1\cf0 ]=avgRGB[\cf6 1\cf0 ];\
                editedImg.ptr<uchar>(y+i)[\cf6 3\cf0 *(x+j)+\cf6 2\cf0 ]=avgRGB[\cf6 2\cf0 ];\
            \}\
        \}\
    \}\
\
\}\
\
\
\cf2 /*int main() \{\
    //This is all for setting up a webcam (part of the tutorial, ignore for now)\
    std::cout << "Hello, World!\\n";\
    VideoCapture cap(0);\
    \
    while (true) \{\
        Mat webcam;\
        cap.read(webcam);\
        imshow("WEBCAM", webcam);\
    \}\
    return 0;\
\}*/\cf0 \
}